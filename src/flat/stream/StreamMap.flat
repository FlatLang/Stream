package flat/stream

import flat/datastruct/list

class<In, Out> extends Stream<Out> {
  public construct(Iterator<In> iterator, mapFunc(In) -> Stream<Out>) {
    super(MapIterator<In, Out>(iterator, mapFunc))
  }

  class MapIterator<T, O> extends StreamIterator<O> {
    Array<mapFunc(T) -> Stream<O>> funcs = Array()

    var O _next = null
    var Bool savedNext = false

    public construct(Iterator<T> iterator, func(T) -> Stream<O>) => super(iterator) {
      funcs.add(func)
    }

    override visible Bool hasNext => savedNext || iterator.hasNext
    visible O stepNext {
      get {
        let value = next

        iterator.stepNext

        savedNext = false

        return value
      }
    }
    visible O next {
      get {
        if (savedNext) return _next
        _next = funcs.map({ _(iterator.next) }).first
        savedNext = true
        return _next
      }
    }
    override visible O current => iterator.current
  }
}