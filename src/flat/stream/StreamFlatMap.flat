package flat/stream

import flat/datastruct/list

class StreamFlatMap<In, Out> extends Stream<Out> {
  public construct(Iterator<In> iterator, mapFunc(In) -> Stream<Out>) {
    super(FlatMapIterator<In, Out>(iterator, mapFunc))
  }

  class FlatMapIterator<T, O> extends StreamIterator<T> {
    Array<mapFunc(T) -> Stream<O>> funcs = Array()

    var Stream<O> _next = null

    public construct(Iterator<T> iterator, func(T) -> Stream<O>) => super(iterator) {
      funcs.add(func)
    }

    mapNext() -> Stream<O> {
      let value = funcs.map({ _(iterator.next) }).first
      let v = (Object)value

      return (Stream)v
    }

    visible Bool hasNext {
      get {
        if (_next) return true
        else if (iterator.hasNext) return true
        else return false
      }
    }
    visible O stepNext {
      get {
        let value = next

        if (!_next.iterator.hasNext) {
          _next = null
          iterator.stepNext
        } else {
          _next.iterator.stepNext
        }

        return value
      }
    }
    visible O next {
      get {
        if (_next) return _next.iterator.current
        while ((_next = mapNext()) && !_next.iterator.hasNext) {
          iterator.stepNext
          if (!iterator.hasNext) {
            return null
          }
        }
        return _next.iterator.stepNext
      }
    }
    override visible O current => iterator.current
  }
}