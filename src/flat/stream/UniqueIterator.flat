package flat/stream

import flat/datastruct
import flat/datastruct/list

class<Type> extends StreamIterator<Type, Type> {
    HashSet<Type> values = HashSet()

    public construct(Iterator<Type> iterator) => super(iterator) {
    }

    visible Bool hasNext {
        get {
            if (iterator.hasNext) {
                var Type value = iterator.next

                while (!values.addIfNotExists(value)) {
                    iterator.stepNext

                    if (!iterator.hasNext) {
                        return false
                    }

                    value = iterator.next
                }

                return true
            }

            return false
        }
    }
    override visible Type stepNext => iterator.stepNext
    override visible Type next => iterator.next
    override visible Type current => iterator.current
}