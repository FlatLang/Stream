package flat/stream

testable class {
  async test `can send event to nobody with default type`() {
    let stream = TypedStream()

    stream.emit("test", "I love you")

    expect(stream).toNotBe(null)
  }

  async test `can send event and receive it with default type`() {
    let stream = TypedStream()

    var triggered = false

    stream.on("test", { triggered = true })

    expect(triggered).toBe(false)

    stream.emit("test", "I love you")

    expect(triggered).toBe(true)
  }

  async test `doesnt receive events in non-existant channel with default type`() {
    let stream = TypedStream()

    var triggered = false

    stream.on("test", { triggered = true })

    expect(triggered).toBe(false)

    stream.emit("testy", "I love you")

    expect(triggered).toBe(false)
  }

  async test `doesnt receive events in wrong channel with default type`() {
    let stream = TypedStream()

    var testTriggered = false
    var testyTriggered = false

    stream.on("test", { testTriggered = true })
    stream.on("testy", { testyTriggered = true })

    expect(testTriggered).toBe(false)
    expect(testyTriggered).toBe(false)

    stream.emit("test", "I love you")

    expect(testTriggered).toBe(true)
    expect(testyTriggered).toBe(false)
  }

  async test `can send event to nobody with String type`() {
    let stream = TypedStream<String>()

    stream.emit("test", "I love you")

    expect(stream).toNotBe(null)
  }

  async test `can send event and receive it with String type`() {
    let stream = TypedStream<String>()

    var triggered = false

    stream.on("test", { triggered = true })

    expect(triggered).toBe(false)

    stream.emit("test", "I love you")

    expect(triggered).toBe(true)
  }

  async test `doesnt receive events in non-existant channel with String type`() {
    let stream = TypedStream<String>()

    var triggered = false

    stream.on("test", { triggered = true })

    expect(triggered).toBe(false)

    stream.emit("testy", "I love you")

    expect(triggered).toBe(false)
  }

  async test `doesnt receive events in wrong channel with String type`() {
    let stream = TypedStream<String>()

    var testTriggered = false
    var testyTriggered = false

    stream.on("test", { testTriggered = true })
    stream.on("testy", { testyTriggered = true })

    expect(testTriggered).toBe(false)
    expect(testyTriggered).toBe(false)

    stream.emit("test", "I love you")

    expect(testTriggered).toBe(true)
    expect(testyTriggered).toBe(false)
  }
}
