package flat/stream

import flat/datastruct/list

class StreamFilter<Type> extends Stream<Type> {
  public construct(Iterator<Type> iterator, filterFunc(Type) -> Bool) {
    super(FilterIterator<Type>(iterator, filterFunc))
  }

  class FilterIterator<T> extends StreamIterator<T> {
    Array<filterFunc(T) -> Bool> funcs = Array()

    public construct(Iterator<T> iterator, func(T) -> Bool) => super(iterator) {
      funcs.add(func)
    }

    visible Bool hasNext {
      get {
        if (iterator.hasNext) {
          while (!funcs.all({ _(iterator.next) })) {
            iterator.stepNext

            if (!iterator.hasNext) {
              return false
            }
          }

          return true
        }

        return false
      }
    }
    override visible Type stepNext => iterator.stepNext
    override visible Type next => iterator.next
    override visible Type current => iterator.current
  }
}