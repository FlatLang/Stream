package flat/stream

import flat/datastruct/list

class<Type> extends Stream<Type> {
  public construct(Iterator<Type> iterator, Int count) {
    super(TakeIterator<Type>(iterator, count))
  }

  class TakeIterator<T> extends StreamIterator<T> {
    private var Int position = 0

    public construct(Iterator<T> iterator, private Int count) => super(iterator) {
    }

    visible Bool hasNext => position++ < count && iterator.hasNext
    override visible Type stepNext => iterator.stepNext
    override visible Type next => iterator.next
    override visible Type current => iterator.current
  }
}