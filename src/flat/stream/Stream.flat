package flat/stream

import flat/datastruct/HashMap
import flat/log/Logger

class {
  let static Logger log = Logger(Stream.class)

  HashMap<String, Array<async action(Object)>> eventListeners = HashMap()
  HashMap<String, Array<Object>> eventBacklog = HashMap()

  visible Bool backlogEvents = true

  public construct(
    visible Bool backlogMissedEvents = false
  ) {}

  public async emit<DataType>(String eventType, DataType data = null) => this {
    let listeners = eventListeners.getOrDefault(eventType, { Array() })

    if (listeners.isNotEmpty) {
      listeners.forEachParallel({ _(data) })
    }
    if (backlogEvents) {
      eventBacklog.getOrDefault(eventType, { Array() }).add(data)
    }
  }

  public async on<DataType>(String eventType, async action(DataType)) => this {
    eventListeners.getOrDefault(eventType, { Array() }).add(action)

    if (backlogMissedEvents) {
      eventBacklog.get(eventType)?.forEachAsync({ action(_) })
    }
  }

  public async consumeAll<DataType>(String eventType, String closedEvent = "close") -> DataType[] {
    external {
      let resolve;
      let reject;

      const promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });
    }

    let results = Array<DataType>()

    on(eventType, (data) => {
      results.add(data)
    })

    on(closedEvent, {
      external {
        resolve(#{results});
      }
    })$

    external {
      return promise;
    }
  }
}
