package flat/stream

import flat/datastruct
import flat/datastruct/list
import flat/log/Logger

class<Type> {
  static Logger log = Logger(Stream.class)

  public construct(visible Iterator<Type> iterator) {}

  public map<Out>(mapFunc(Type) -> Out) -> Stream<Out> {
    return StreamMap(iterator, mapFunc)
  }

  public mapNotNull<Out>(mapFunc(Type) -> Out) -> Stream<Out> {
    return StreamMap(iterator, mapFunc).filter({ _ != null })
  }

  public flatMap<Out>(mapFunc(Type) -> Stream<Out>) -> Stream<Out> {
    return StreamFlatMap(iterator, mapFunc)
  }

  public filter(filterFunc(Type) -> Bool) -> Stream<Type> {
    return StreamFilter(iterator, filterFunc)
  }

  public toArray() -> Type[] {
    let array = Type[]

    for (value in iterator) {
      array.add(value)
    }

    return array
  }
}
